from django.contrib.auth.models import User
from np_app.models import Author
from np_app.models import Category
from np_app.models import Post
from np_app.models import PostCategory
from np_app.models import Comment
from django.db.models import Sum

1)Создать двух пользователей (с помощью метода User.objects.create_user('username')).
user1 = User.objects.create(username='user1', password='123', first_name='Vasya', last_name='Pupkin', email='vasya@mail.ru')
user2 = User.objects.create(username='user2', password='321', first_name='Petya', last_name='Pipkin', email='petya@mail.ru') 

2)Создать два объекта модели Author, связанные с пользователями.
author1 = Author.objects.create(user_id=1)
author2 = Author.objects.create(user_id=2)

3)Добавить 4 категории в модель Category.
Category.objects.create(genre = 'Механика')
Category.objects.create(genre = 'Автомобили')
Category.objects.create(genre = 'Компьютерные игры')
Category.objects.create(genre = 'ИТ')

4)Добавить 2 статьи и 1 новость.
Post.objects.create(author=Author(pk=1), choice='Arti', header_post='Типы редукторов', text_post='Текст про типы и свойства редукторов')
Post.objects.create(author=Author(pk=1), choice='Arti', header_post='Японцы или немцы', text_post='Текст про сравнение немецких и японских автомобилей') 
Post.objects.create(author=Author(pk=2), choice='News', header_post='Новая игра - тетрис 2', text_post='Текст про тетрис 2') 

5)Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
PostCategory.objects.create(post = Post.objects.get(pk=1), category = Category.objects.get(genre='Механика'))
PostCategory.objects.create(post = Post.objects.get(pk=1), category = Category.objects.get(genre='Автомобили'))
PostCategory.objects.create(post = Post.objects.get(pk=2), category = Category.objects.get(genre='Автомобили')) 
PostCategory.objects.create(post = Post.objects.get(pk=2), category = Category.objects.get(genre='Компьютерные игры'))
PostCategory.objects.create(post = Post.objects.get(pk=3), category = Category.objects.get(genre='ИТ'))
PostCategory.objects.create(post = Post.objects.get(pk=3), category = Category.objects.get(genre='Компьютерные игры'))

6)Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
Comment.objects.create(post = Post.objects.get(pk=1), user = User.objects.get(username='user2'), text_comment = 'Очень скучно, чел')
Comment.objects.create(post = Post.objects.get(pk=2), user = User.objects.get(username='user2'), text_comment = 'Японские тачки рулят!')
Comment.objects.create(post = Post.objects.get(pk=3), user = User.objects.get(username='user1'), text_comment = 'Лучшая игра на свете')
Comment.objects.create(post = Post.objects.get(pk=3), user = User.objects.get(username='user2'), text_comment = 'Я уже пишу тетрис-3')

7)Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Post.objects.get(pk=1).like()
Post.objects.get(pk=1).dislike() 
Post.objects.get(pk=1).dislike()
Post.objects.get(pk=1).dislike()
Post.objects.get(pk=2).like()    
Post.objects.get(pk=2).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=2).like()
Post.objects.get(pk=3).like() 
Post.objects.get(pk=3).like()
Post.objects.get(pk=3).dislike() 
Post.objects.get(pk=3).dislike()
Post.objects.get(pk=3).like()   
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).like()
Comment.objects.get(pk=1).dislike() 
Comment.objects.get(pk=2).like()    
Comment.objects.get(pk=2).dislike() 
Comment.objects.get(pk=2).dislike()
Comment.objects.get(pk=2).dislike()
Comment.objects.get(pk=3).like()    
Comment.objects.get(pk=3).like()
Comment.objects.get(pk=4).dislike() 
Comment.objects.get(pk=4).dislike()
Comment.objects.get(pk=4).dislike()
Comment.objects.get(pk=4).dislike()
Comment.objects.get(pk=1).dislike() 

8)Обновить рейтинги пользователей.
Author.objects.get(pk=1).update_rating()
Author.objects.get(pk=2).update_rating()

9)Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
Author.objects.all().order_by('-rate').values('user', 'rate')[0]

10)Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
Post.objects.all().order_by('-rate_post').values('time_create_post', 'author', 'rate_post', 'header_post')[0]
best_post = Post.objects.all().order_by('-rate_post')[0]   
best_post.preview()

11)Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
Comment.objects.filter(post=best_post).values('date_create', 'user', 'rate', 'text_comment')

